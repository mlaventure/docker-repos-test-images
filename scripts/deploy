#!/bin/bash

set -x

GRAPHITE_EXPORTER_IMG_NAME=${GRAPHITE_EXPORTER_IMG_NAME:-docker-test-install-from-repo-graphite-exporter}
TEST_IMG_PREFIX=${TEST_IMG_PREFIX:-docker-test-install-from-repo-on}
TEST_CONTAINER_NAME_PREFIX=${TEST_CONTAINER_NAME_PREFIX:-docker_test_install_from_repo_on}

# Overriadable by command line
DOCKER_APT_URL=${DOCKER_APT_URL:-""}
DOCKER_YUM_URL=${DOCKER_YUM_URL:-""}
GRAPHITE_EXPORTER_SERVER=${GRAPHITE_EXPORTER_SERVER:-docker_test_install_from_repo_graphite_exporter}
DOCKER_INSTALL_TEST_INTERVAL=${DOCKER_INSTALL_TEST_INTERVAL:-30m}
DOCKER_INSTALL_DOMAIN=${DOCKER_INSTALL_DOMAIN:-"get test experimental"}
DOCKER_HUB_REPO_NAME=${DOCKER_HUB_REPO_NAME:-docker}
FORCE_DEPLOY=${FORCE_DEPLOY:-false}
TARGET_DIST=${TARGET_DIST:-}
STAGGER_INTERVAL=${STAGGER_INTERVAL:-0m}

DOCKER_OPTIONS=${DOCKER_OPTIONS:-}

DOCKER_CMD="docker $DOCKER_OPTIONS"
REPLACE_EXPORTER="false"
RESTART_OPTIONS="--restart always"

start_graphite_exporter() {
	# pull latest image
	${DOCKER_CMD} pull ${DOCKER_HUB_REPO_NAME}/${GRAPHITE_EXPORTER_IMG_NAME}

	if [ -n "$(${DOCKER_CMD} ps -a | grep "$GRAPHITE_EXPORTER_SERVER")" ]
	then
		if [ "$REPLACE_EXPORTER" = "true" ]
		then
			${DOCKER_CMD} rm -f $(${DOCKER_CMD} ps -aqf name="$GRAPHITE_EXPORTER_SERVER")
		else
			return 0
		fi
	fi

	${DOCKER_CMD} run -d -i -P --restart always --name $GRAPHITE_EXPORTER_SERVER ${DOCKER_HUB_REPO_NAME}/${GRAPHITE_EXPORTER_IMG_NAME}
}

get_dist_list() {
	[ -n "$TARGET_DIST" ] && return 0

	TARGET_DIST=$(find images/{deb,rpm} -mindepth 1 -maxdepth 1 -type d -printf "%f\n")
}

start_testers() {
	# populate dist list if needed
	get_dist_list

	for dist in $TARGET_DIST
	do
		# update image
		img_name="${DOCKER_HUB_REPO_NAME}/${TEST_IMG_PREFIX}-$dist"
		${DOCKER_CMD} pull $img_name

		for domain in $DOCKER_INSTALL_DOMAIN
		do
			cont_name=${TEST_CONTAINER_NAME_PREFIX}_${dist}_for_${domain}

			if [ "$FORCE_DEPLOY" = "true" ] &&  [ -n "$(${DOCKER_CMD} ps -a | grep "$cont_name")" ]
			then
				${DOCKER_CMD} rm -f $(${DOCKER_CMD} ps -aqf name="$cont_name")
			fi

			${DOCKER_CMD} run ${RESTART_OPTIONS} -d -i --link $GRAPHITE_EXPORTER_SERVER -e GRAPHITE_EXPORTER_SERVER=$GRAPHITE_EXPORTER_SERVER -e DOCKER_INSTALL_TEST_INTERVAL=$DOCKER_INSTALL_TEST_INTERVAL -e DOCKER_INSTALL_DOMAIN=$domain -e DOCKER_APT_URL=$DOCKER_APT_URL -e DOCKER_YUM_URL=$DOCKER_YUM_URL --name $cont_name $img_name

			sleep ${STAGGER_INTERVAL}
		done
	done
}


main() {
	start_graphite_exporter
	start_testers
}

usage() {
	cat <<EOF
usage: deploy [options]
	--apt-url			[apt repo url to use]
	--yum-url			[yum repo url to use]
    --force             ["true" to remove existing containers first]
    --graphite-export   [name of container running graphite_exporter, default to graphite_exporter]
    --hub-repo          [where to pull the images from]
    --install-domain    [space separated value containing "get", "test" or "experimental" if option is unspecifed deploys them all]
	--replace-exporter  ["true" to replace the exporter if it is already running]
	--stagger-interval	[How long to wait between each container start, default to 5m]
    --target-dist       [space separated list of distribution to deploy as expect in the image name (e.g. "debian-jessie centos-7"). If empty all of them are deployed]
    --test-interval     [how often to run the test, default to 30m]
EOF
	exit $1
}

[ $# -eq 1 ] && usage 1

while [[ $# > 1 ]]
do
	key=$1

	# all our options takes a mandatory argument
	[ -n "$2" ] || usage 1

	case $key in
		--graphite-exporter)
			GRAPHITE_EXPORTER_SERVER="$2"
			shift
			;;
		--test-interval)
			DOCKER_INSTALL_TEST_INTERVAL="$2"
			;;
		--install-domain)
			DOCKER_INSTALL_DOMAIN="$2"
			shift
			;;
		--hub-repo)
			DOCKER_HUB_REPO_NAME="$2"
			shift
			;;
		--force)
			FORCE_DEPLOY="$2"
			shift
			;;
		--replace-exporter)
			REPLACE_EXPORTER="$2"
			shift
			;;
		--stagger-interval)
			STAGGER_INTERVAL="$2"
			shift
			;;
		--target-dist)
			TARGET_DIST="$2"
			shift
			;;
		--apt-url)
			DOCKER_APT_URL="$2"
			shift
			;;
		--yum-url)
			DOCKER_YUM_URL="$2"
			shift
			;;
		*)
			usage 1
			;;
	esac
	shift
done

main
